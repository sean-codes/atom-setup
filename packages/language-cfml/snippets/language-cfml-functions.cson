'.cfml, .cfscript':
  #A
  'abs':
    'prefix': 'abs'
    'body': 'Abs(${1:number})$0'
  'acos':
    'prefix': 'acos'
    'body': 'ACos(${1:number})$0'
  'addsoaprequestheader':
    'prefix': 'addsoaprequestheader'
    'body': 'AddSOAPRequestHeader(${1:webservice}, ${2:namespace}, ${3:name}, ${4:value} ${5:[, mustunderstand]})$0'
  'addsoapresponseheader':
    'prefix': 'addsoapresponseheader'
    'body': 'AddSOAPResponseHeader(${1:namespace}, ${2:name}, ${3:value} ${4:[, mustunderstand]})$0'
  'arrayappend':
    'prefix': 'arrayappend'
    'body': 'ArrayAppend(${1:array}, ${2:value}${3: [, merge ]})$0'
  'arrayavg':
    'prefix': 'arrayavg'
    'body': 'ArrayAvg(${1:array})$0'
  'arraycear':
    'prefix': 'arrayclear'
    'body': 'ArrayClear(${1:array})$0'
  'arraydeleteat':
    'prefix': 'arraydeleteat'
    'body': 'ArrayDeleteAt(${1:array}, ${2:position})$0'
  'arrayinsertat':
    'prefix': 'arrayinsertat'
    'body': 'ArrayInsertAt(${1:array}, ${2:position}, ${3:value})$0'
  'arrayisempty':
    'prefix': 'arrayisempty'
    'body': 'ArrayIsEmpty(${1:array})$0'
  'arraylen':
    'prefix': 'arraylen'
    'body': 'ArrayLen(${1:array})$0'
  'arraymax':
    'prefix': 'arraymax'
    'body': 'ArrayMax(${1:array})$0'
  'arraymin':
    'prefix': 'arraymin'
    'body': 'ArrayMin(${1:array})$0'
  'arraynew':
    'prefix': 'arraynew'
    'body': 'ArrayNew(${1:dimension})$0'
  'arrayprepend':
    'prefix': 'arrayprepend'
    'body': 'ArrayPrepend(${1:array}, ${2:value})$0'
  'arrayresize':
    'prefix': 'arrayresize'
    'body': 'ArrayResize(${1:array}, ${2:minimum_size})$0'
  'arrayset':
    'prefix': 'arrayset'
    'body': 'ArraySet(${1:array}, ${2:start_pos}, ${3:end_pos}, ${4:value})$0'
  'arraysort':
    'prefix': 'arraysort'
    'body': 'ArraySort(${1:array}, ${2:sort_type} ${3:[, sort_order ]})$0'
  'arraysum':
    'prefix': 'arraysum'
    'body': 'ArraySum(${1:array})$0'
  'arrayswap':
    'prefix': 'arrayswap'
    'body': 'ArraySwap(${1:array}, ${2:position1}, ${3:position2})$0'
  'arraytolist':
    'prefix': 'arraytolist'
    'body': 'ArrayToList(${1:array} ${2:[, delimiter ]})$0'
  'asc':
    'prefix': 'asc'
    'body': 'Asc(${1:string})$0'
  'asin':
    'prefix': 'asin'
    'body': 'ASin(${1:number})$0'
  'atn':
    'prefix': 'atn'
    'body': 'Atn(${1:number})$0'
  #B
  'binarydecode':
    'prefix': 'binarydecode'
    'body': 'BinaryDecode(${1:string}, ${2:binaryencoding})$0'
  'binaryencode':
    'prefix': 'binaryencode'
    'body': 'BinaryEncode(${1:binarydata}, ${2:encoding})$0'
  'bitand':
    'prefix': 'bitand'
    'body': 'BitAnd(${1:number1}, ${2:number2})$0'
  'bitmaskclear':
    'prefix': 'bitmaskclear'
    'body': 'BitMaskClear(${1:number}, ${2:start}, ${3:length})$0'
  'bitmaskread':
    'prefix': 'bitmaskread'
    'body': 'BitMaskRead(${1:number}, ${2:start}, ${3:length})$0'
  'bitmaskset':
    'prefix': 'bitmaskset'
    'body': 'BitMaskSet(${1:number}, ${2:mask}, ${3:start}, ${4:length})$0'
  'bitnot':
    'prefix': 'bitnot'
    'body': 'BitNot(${1:number})$0'
  'bitor':
    'prefix': 'bitor'
    'body': 'BitOr(${1:number1}, ${2:number2})$0'
  'bitshln':
    'prefix': 'bitshln'
    'body': 'BitSHLN(${1:number}, ${2:count})$0'
  'bitshrn':
    'prefix': 'bitshrn'
    'body': 'BitSHRN(${1:number}, ${2:count})$0'
  'bitxor':
    'prefix': 'bitxor'
    'body': 'BitXor(${1:number1}, ${2:number2})$0'
  #C
  'ceiling':
    'prefix': 'ceiling'
    'body': 'ceiling(${1:number})$0'
  'charsetdecode':
    'prefix': 'charsetdecode'
    'body': 'CharsetDecode(${1:string}, ${2:encoding})$0'
  'charsetencode':
    'prefix': 'charsetencode'
    'body': 'CharsetEncode(${1:binaryobject}, ${2:encoding})$0'
  'chr':
    'prefix': 'chr'
    'body': 'Chr(${1:number})$0'
  'cjustify':
    'prefix': 'cjustify'
    'body': 'Cjustify(${1:string}, ${2:length})$0'
  'compare':
    'prefix': 'compare'
    'body': 'Compare(${1:string1}, ${2:string2})$0'
  'comparenocase':
    'prefix': 'comparenocase'
    'body': 'CompareNoCase(${1:string1}, ${2:string2})$0'
  'cos':
    'prefix': 'cos'
    'body': 'Cos(${1:number})$0'
  'createdate':
    'prefix': 'createdate'
    'body': 'CreateDate(${1:year}, ${2:month}, ${3:day})$0'
  'createdatetime':
    'prefix': 'createdatetime'
    'body': 'CreateDateTime(${1:year}, ${2:month}, ${3:day}, ${4:hour}, ${5:minute}, ${6:second})$0'
  'createodbcdate':
    'prefix': 'createodbcdate'
    'body': 'CreateODBCDate(${1:date})$0'
  'createodbcdatetime':
    'prefix': 'createodbcdatetime'
    'body': 'CreateODBCDateTime(${1:date})$0'
  'createodbctime':
    'prefix': 'createodbctime'
    'body': 'CreateODBCTime(${1:date})$0'
  'createtime':
    'prefix': 'createtime'
    'body': 'CreateTime(${1:hour}, ${2:minute}, ${3:second})$0'
  'createtimespan':
    'prefix': 'createtimespan'
    'body': 'CreateTimeSpan(${1:days}, ${2:hours}, ${3:minutes}, ${4:seconds})$0'
  'createuuid':
    'prefix': 'createuuid'
    'body': 'CreateUUID($1)$0'
  'dateadd':
    'prefix': 'dateadd'
    'body': 'DateAdd(${1:"datepart"}, ${2:number}, ${3:"date"})$0'
  'datecompare':
    'prefix': 'datecompare'
    'body': 'DateCompare(${1:"date1"}, ${2:"date2"} ${3:[, "datePart"]})$0'
  'dateconvert':
    'prefix': 'dateconvert'
    'body': 'DateConvert(${1:"conversion-type"}, ${2:"date"})$0'
  'datediff':
    'prefix': 'datediff'
    'body': 'DateDiff(${1:"datepart"}, ${2:"date1"}, ${3:"date2"})$0'
  'dateformat':
    'prefix': 'dateformat'
    'body': 'DateFormat(${1:"date"} ${2:[, "mask"]})$0'
  'datepart':
    'prefix': 'datepart'
    'body': 'DatePart(${1:"datepart"}, ${2:"date"})$0'
  'day':
    'prefix': 'day'
    'body': 'Day(${1:"date"})$0'
  'dayofweek':
    'prefix': 'dayofweek'
    'body': 'DayOfWeek(${1:"date"})$0'
  'dayofweekasstring':
    'prefix': 'dayofweekasstring'
    'body': 'DayOfWeekAsString(${1:day_of_week})$0'
  'dayofyear':
    'prefix': 'dayofyear'
    'body': 'DayOfYear(${1:"date"})$0'
  'daysinmonth':
    'prefix': 'daysinmonth'
    'body': 'DaysInMonth(${1:"date"})$0'
  'daysinyear':
    'prefix': 'daysinyear'
    'body': 'DaysInYear(${1:"date"})$0'
  'de':
    'prefix': 'de'
    'body': 'DE(${1:string})$0'
  'decimalformat':
    'prefix': 'decimalformat'
    'body': 'DecimalFormat(${1:number})$0'
  'decrementvalue':
    'prefix': 'decrementvalue'
    'body': 'DecrementValue(${1:number})$0'
  'decrypt':
    'prefix': 'decrypt'
    'body': 'Decrypt(${1:encrypted_string}, ${2:key}${3: [, algorithm]}${4: [, encoding]}${5: [, IVorSalt]}${6: [, iterations]})$0'
  'decryptbinary':
    'prefix': 'decryptbinary'
    'body': 'DecryptBinary(${1:bytes}, ${2:key}, ${3:[, algorithm]} ${4:[, IVorSalt]} ${5:[, iterations]})$0'
  'deleteclientvariable':
    'prefix': 'deleteclientvariable'
    'body': 'DeleteClientVariable(${1:"name"})$0'
  'directoryexists':
    'prefix': 'directoryexists'
    'body': 'DirectoryExists(${1:absolute_path})$0'
  'dollarformat':
    'prefix': 'dollarformat'
    'body': 'DollarFormat(${1:number})$0'
  'duplicate':
    'prefix': 'duplicate'
    'body': 'Duplicate(${1:variable_name})$0'
  'dump':
    'prefix': 'dump'
    'body': 'dump(${1:any});$0'
  'echo':
    'prefix': 'echo'
    'body': 'echo(${1:string});$0' 
  'encrypt':
    'prefix': 'encrypt'
    'body': 'Encrypt(${1:string}, ${2:key}${3: [, algorithm]}${4: [, encoding]}${5: [, IVorSalt]}${6: [, iterations]})$0'
  'encryptbinary':
    'prefix': 'encryptbinary'
    'body': 'EncryptBinary(${1:bytes}, ${2:key}${3: [, algorithm]}${4: [, IVorSalt]}${5: [, iterations]})$0'
  'evaluate':
    'prefix': 'evaluate'
    'body': 'Evaluate(${1:string_expression1}${2: [, string_expression2]}${3: [, ]})$0'
  'exp':
    'prefix': 'exp'
    'body': 'Exp(${1:number})$0'
  'expandpath':
    'prefix': 'expandpath'
    'body': 'Expandpath(${1:relative_path})$0'
  'fileexists':
    'prefix': 'fileexists'
    'body': 'FileExists(${1:absolute_path})$0'
  'find':
    'prefix': 'find'
    'body': 'Find(${1:substring}, ${2:string} ${3:[, start ]})$0'
  'findnocase':
    'prefix': 'findnocase'
    'body': 'FindNoCase(${1:substring}, ${2:string} ${3:[, start ]})$0'
  'findoneof':
    'prefix': 'findoneof'
    'body': 'FindOneOf(${1:set}, ${2:string} ${3:[, start ]})$0'
  'firstdayofmonth':
    'prefix': 'firstdayofmonth'
    'body': 'FirstDayOfMonth(${1:date})$0'
  'fix':
    'prefix': 'fix'
    'body': 'Fix(${1:number})$0'
  'formatbasen':
    'prefix': 'formatbasen'
    'body': 'FormatBaseN(${1:number}, ${2:radix})$0'
  'generatesecretkey':
    'prefix': 'generatesecretkey'
    'body': 'GenerateSecretKey(${1:algorithm})$0'
  'getauthuser':
    'prefix': 'getauthuser'
    'body': 'GetAuthUser(${1:})$0'
  'getbasetagdata':
    'prefix': 'getbasetagdata'
    'body': 'GetBaseTagData(${1:tagname} ${2:[, instancenumber ]})$0'
  'getbasetaglist':
    'prefix': 'getbasetaglist'
    'body': 'GetBaseTagList(${1:})$0'
  'getbasetemplatepath':
    'prefix': 'getbasetemplatepath'
    'body': 'GetBaseTemplatePath(${1:})$0'
  'getclientvariableslist':
    'prefix': 'getclientvariableslist'
    'body': 'GetClientVariablesList(${1:})$0'
  'getcontextroot':
    'prefix': 'getcontextroot'
    'body': 'GetContextRoot(${1:})$0'
  'getcurrenttemplatepath':
    'prefix': 'getcurrenttemplatepath'
    'body': 'GetCurrentTemplatePath(${1:})$0'
  'getdirectoryfrompath':
    'prefix': 'getdirectoryfrompath'
    'body': 'GetDirectoryFromPath(${1:path})$0'
  'getencoding':
    'prefix': 'getencoding'
    'body': 'GetEncoding(${1:scope_name})$0'
  'getexception':
    'prefix': 'getexception'
    'body': 'GetException(${1:object})$0'
  'getfilefrompath':
    'prefix': 'getfilefrompath'
    'body': 'GetFileFromPath(${1:path})$0'
  'getfunctionlist':
    'prefix': 'getfunctionlist'
    'body': 'GetFunctionList(${1:})$0'
  'getgatewayhelper':
    'prefix': 'getgatewayhelper'
    'body': 'GetGatewayHelper(${1:gatewayID})$0'
  'gethttprequestdata':
    'prefix': 'gethttprequestdata'
    'body': 'GetHttpRequestData(${1:})$0'
  'gethttptimestring':
    'prefix': 'gethttptimestring'
    'body': 'GetHttpTimeString(${1:date_time_object})$0'
  'getk2serverdoccount':
    'prefix': 'getk2serverdoccount'
    'body': 'GetK2ServerDocCount(${1:})$0'
  'getk2serverdoccountlimit':
    'prefix': 'getk2serverdoccountlimit'
    'body': 'GetK2ServerDocCountLimit(${1:})$0'
  'getlocale':
    'prefix': 'getlocale'
    'body': 'GetLocale(${1:})$0'
  'getlocaledisplayname':
    'prefix': 'getlocaledisplayname'
    'body': 'GetLocaleDisplayName(${1:[locale]}${2: [, inLocale]})$0'
  'getlocalhostip':
    'prefix': 'getlocalhostip'
    'body': 'GetLocalHostIP(${1:})$0'
  'getmetadata':
    'prefix': 'getmetadata'
    'body': 'GetMetaData(${1:object})$0'
  'getmetricdata':
    'prefix': 'getmetricdata'
    'body': 'GetMetricData(${1:mode})$0'
  'getpagecontext':
    'prefix': 'getpagecontext'
    'body': 'GetPageContext(${1:})$0'
  'getprofilesections':
    'prefix': 'getprofilesections'
    'body': 'GetProfileSections(${1:iniFile})$0'
  'getprofilestring':
    'prefix': 'getprofilestring'
    'body': 'GetProfileString(${1:iniPath}, ${2:section}, ${3:entry})$0'
  'getsoaprequest':
    'prefix': 'getsoaprequest'
    'body': 'GetSOAPRequest(${1:})$0'
  'getsoaprequestheader':
    'prefix': 'getsoaprequestheader'
    'body': 'GetSOAPRequestHeader(${1:namespace}, ${2:name} ${3:[, asXML]})$0'
  'getsoapresponse':
    'prefix': 'getsoapresponse'
    'body': 'GetSOAPResponse(${1:webservice})$0'
  'getsoapresponseheader':
    'prefix': 'getsoapresponseheader'
    'body': 'GetSOAPResponseHeader(${1:webservice}, ${2:namespace}, ${3:name} ${4:[, asXML]})$0'
  'gettempdirectory':
    'prefix': 'gettempdirectory'
    'body': 'GetTempDirectory(${1:})$0'
  'gettempfile':
    'prefix': 'gettempfile'
    'body': 'GetTempFile(${1:dir}, ${2:prefix})$0'
  'gettickcount':
    'prefix': 'gettickcount'
    'body': 'GetTickCount(${1:})$0'
  'gettimezoneinfo':
    'prefix': 'gettimezoneinfo'
    'body': 'GetTimeZoneInfo(${1:})$0'
  'gettoken':
    'prefix': 'gettoken'
    'body': 'GetToken(${1:string}, ${2:index} ${3:[, delimiters ]})$0'
  'hash':
    'prefix': 'hash'
    'body': 'Hash(${1:string$}${2: [, algorithm]}${3: [, encoding]})$0'
  'hour':
    'prefix': 'hour'
    'body': 'hour(${1:date})$0'
  'htmlcodeformat':
    'prefix': 'htmlcodeformat'
    'body': 'HTMLCodeFormat(${1:string} ${2:[, version ]})$0'
  'htmleditformat':
    'prefix': 'htmleditformat'
    'body': 'HTMLEditFormat(${1:string} ${2:[, version ]})$0'
  'iif':
    'prefix': 'iif'
    'body': 'IIf(${1:condition}, ${2:string_expression1}, ${3:string_expression2})$0'
  'incrementvalue':
    'prefix': 'incrementvalue'
    'body': 'IncrementValue(${1:number})$0'
  'inputbasen':
    'prefix': 'inputbasen'
    'body': 'InputBaseN(${1:string}, ${2:radix})$0'
  'insert':
    'prefix': 'insert'
    'body': 'Insert(${1:substring}, ${2:string}, ${3:position})$0'
  'int':
    'prefix': 'int'
    'body': 'Int(${1:number})$0'
  'isarray':
    'prefix': 'isarray'
    'body': 'IsArray(${1:value} ${2:[, number ]})$0'
  'isbinary':
    'prefix': 'isbinary'
    'body': 'IsBinary(${1:value})$0'
  'isboolean':
    'prefix': 'isboolean'
    'body': 'IsBoolean(${1:value})$0'
  'iscustomfunction':
    'prefix': 'iscustomfunction'
    'body': 'IsCustomFunction(${1:name})$0'
  'isdate':
    'prefix': 'isdate'
    'body': 'IsDate(${1:string})$0'
  'isdebugmode':
    'prefix': 'isdebugmode'
    'body': 'IsDebugMode($1)$0'
  'isdefined':
    'prefix': 'isdefined'
    'body': 'IsDefined(${1:"variable_name"})$0'
  'isk2serverabroker':
    'prefix': 'isk2serverabroker'
    'body': 'IsK2ServerABroker(${1:})$0\t\t\t'
  'isk2serverdoccountexceeded':
    'prefix': 'isk2serverdoccountexceeded'
    'body': 'IsK2ServerDocCountExceeded(${1:})$0\t\t\t\t'
  'isk2serveronline':
    'prefix': 'isk2serveronline'
    'body': 'IsK2ServerOnline(${1:})$0'
  'isleapyear':
    'prefix': 'isleapyear'
    'body': 'IsLeapYear(${1:year})$0'
  'islocalhost':
    'prefix': 'islocalhost'
    'body': 'IsLocalHost(${1:ipaddress})$0'
  'isnumeric':
    'prefix': 'isnumeric'
    'body': 'IsNumeric(${1:string})$0'
  'isnumericdate':
    'prefix': 'isnumericdate'
    'body': 'IsNumericDate(${1:number})$0'
  'isobject':
    'prefix': 'isobject'
    'body': 'IsObject(${1:value})$0'
  'isquery':
    'prefix': 'isquery'
    'body': 'IsQuery(${1:value})$0'
  'issimplevalue':
    'prefix': 'issimplevalue'
    'body': 'IsSimpleValue(${1:value})$0'
  'issoaprequest':
    'prefix': 'issoaprequest'
    'body': 'IsSOAPRequest(${1:})$0'
  'isstruct':
    'prefix': 'isstruct'
    'body': 'IsStruct(${1:variable})$0'
  'isuserinrole':
    'prefix': 'isuserinrole'
    'body': 'IsUserInRole(${1:"role_name"})$0'
  'isvalid':
    'prefix': 'isvalid'
    'body': 'IsValid(${1:type}, ${2:value})$0'
  'iswddx':
    'prefix': 'iswddx'
    'body': 'IsWDDX(${1:value})$0'
  'isxml':
    'prefix': 'isxml'
    'body': 'IsXML(${1:value})$0'
  'isxmlattribute':
    'prefix': 'isxmlattribute'
    'body': 'IsXmlAttribute(${1:value})$0'
  'isxmldoc':
    'prefix': 'isxmldoc'
    'body': 'IsXmlDoc(${1:value})$0'
  'isxmlelem':
    'prefix': 'isxmlelem'
    'body': 'IsXmlElem(${1:value})$0'
  'isxmlnode':
    'prefix': 'isxmlnode'
    'body': 'IsXmlNode(${1:value})$0'
  'isxmlroot':
    'prefix': 'isxmlroot'
    'body': 'IsXmlRoot(${1:value})$0'
  'javacast':
    'prefix': 'javacast'
    'body': 'JavaCast(${1:type}, ${2:variable})$0'
  'jsstringformat':
    'prefix': 'jsstringformat'
    'body': 'JSStringFormat(${1:string})$0'
  'lcase':
    'prefix': 'lcase'
    'body': 'LCase(${1:string})$0'
  'left':
    'prefix': 'left'
    'body': 'Left(${1:string}, ${2:count})$0'
  'len':
    'prefix': 'len'
    'body': 'Len(${1:string or binary object})$0'
  'listappend':
    'prefix': 'listappend'
    'body': 'ListAppend(${1:list}, ${2:value}${3: [, delimiters ]})$0'
  'listchangedelims':
    'prefix': 'listchangedelims'
    'body': 'ListChangeDelims(${1:list}, ${2:new_delimiter}${3: [, delimiters ]})$0'
  'listcontains':
    'prefix': 'listcontains'
    'body': 'ListContains(${1:list}, ${2:substring}${3: [, delimiters ]})$0'
  'listcontainsnocase':
    'prefix': 'listcontainsnocase'
    'body': 'ListContainsNoCase(${1:list}, ${2:substring} ${3:[, delimiters ]})$0'
  'listdeleteat':
    'prefix': 'listdeleteat'
    'body': 'ListDeleteAt(${1:list}, ${2:position}${3: [, delimiters ]})$0'
  'listfind':
    'prefix': 'listfind'
    'body': 'ListFind(${1:list}, ${2:value}${3: [, delimiters ]})$0'
  'listfindnocase':
    'prefix': 'listfindnocase'
    'body': 'ListFindNoCase(${1:list}, ${2:value}${3: [, delimiters ]})$0'
  'listfirst':
    'prefix': 'listfirst'
    'body': 'ListFirst(${1:list}${2: [, delimiters]})$0'
  'listgetat':
    'prefix': 'listgetat'
    'body': 'ListGetAt(${1:list}, ${2:position}${3: [, delimiters]})$0'
  'listinsertat':
    'prefix': 'listinsertat'
    'body': 'ListInsertAt(${1:list}, ${2:position}, ${3:value}${4: [, delimiters]})$0'
  'listlast':
    'prefix': 'listlast'
    'body': 'ListLast(${1:list}${2: [, delimiters]})$0'
  'listlen':
    'prefix': 'listlen'
    'body': 'ListLen(${1:list}${2: [, delimiters ]})$0'
  'listprepend':
    'prefix': 'listprepend'
    'body': 'ListPrepend(${1:list}, ${2:value}${3: [, delimiters ]})$0'
  'listqualify':
    'prefix': 'listqualify'
    'body': 'ListQualify(${1:list}, ${2:qualifier}${3: [, delimiters ]}${4: [, elements ]})$0'
  'listrest':
    'prefix': 'listrest'
    'body': 'ListRest(${1:list}${2: [, delimiters ]})$0'
  'listsetat':
    'prefix': 'listsetat'
    'body': 'ListSetAt(${1:list}, ${2:position}, ${3:value}${4: [, delimiters]})$0'
  'listsort':
    'prefix': 'listsort'
    'body': 'ListSort(${1:list}, ${2:sort_type}${3: [, sort_order]}${4:[, delimiters]})$0'
  'listtoarray':
    'prefix': 'listtoarray'
    'body': 'ListToArray(${1:list}${2: [, delimiters ]})$0'
  'listvaluecount':
    'prefix': 'listvaluecount'
    'body': 'ListValueCount(${1:list}, ${2:value}${3: [, delimiters ]})$0'
  'listvaluecountnocase':
    'prefix': 'listvaluecountnocase'
    'body': 'ListValueCountNoCase(${1:list}, ${2:value}${3: [, delimiters ]})$0'
  'ljustify':
    'prefix': 'ljustify'
    'body': 'LJustify(${1:string}, ${2:length})$0'
  'log':
    'prefix': 'log'
    'body': 'Log(${1:number})$0'
  'log10':
    'prefix': 'log10'
    'body': 'Log10(${1:number})$0'
  'lscurrencyformat':
    'prefix': 'lscurrencyformat'
    'body': 'LSCurrencyFormat(${1:number}${2: [, type]})$0'
  'lsdateformat':
    'prefix': 'lsdateformat'
    'body': 'LSDateFormat(${1:date}${2: [, mask]})$0'
  'lseurocurrencyformat':
    'prefix': 'lseurocurrencyformat'
    'body': 'LSEuroCurrencyFormat(${1:currency-number}${2: [, type]})$0'
  'lsiscurrency':
    'prefix': 'lsiscurrency'
    'body': 'LSIsCurrency(${1:string})$0'
  'lsisdate':
    'prefix': 'lsisdate'
    'body': 'LSIsDate(${1:string})$0'
  'lsisnumeric':
    'prefix': 'lsisnumeric'
    'body': 'LSIsNumeric(${1:string})$0'
  'lsnumberformat':
    'prefix': 'lsnumberformat'
    'body': 'LSNumberFormat(${1:number}${2: [, mask ]})$0'
  'lsparsecurrency':
    'prefix': 'lsparsecurrency'
    'body': 'LSParseCurrency(${1:string})$0'
  'lsparsedatetime':
    'prefix': 'lsparsedatetime'
    'body': 'LSParseDateTime(${1:date/time-string})$0'
  'lsparseeurocurrency':
    'prefix': 'lsparseeurocurrency'
    'body': 'LSParseEuroCurrency(${1:currency-string})$0'
  'lsparsenumber':
    'prefix': 'lsparsenumber'
    'body': 'LSParseNumber(${1:string})$0'
  'lstimeformat':
    'prefix': 'lstimeformat'
    'body': 'LSTimeFormat(${1:time}${2: [, mask ]})$0'
  'ltrim':
    'prefix': 'ltrim'
    'body': 'LTrim(${1:string})$0'
  'max':
    'prefix': 'max'
    'body': 'Max(${1:number1}, ${2:number2})$0'
  'mid':
    'prefix': 'mid'
    'body': 'Mid(${1:string}, ${2:start}, ${3:count})$0'
  'min':
    'prefix': 'min'
    'body': 'Min(${1:number1}, ${2:number2})$0'
  'minute':
    'prefix': 'minute'
    'body': 'Minute(${1:date})$0'
  'month':
    'prefix': 'month'
    'body': 'Month(${1:date})$0'
  'monthasstring':
    'prefix': 'monthasstring'
    'body': 'MonthAsString(${1:month_number})$0'
  'now':
    'prefix': 'now'
    'body': 'Now(${1:})$0'
  'numberformat':
    'prefix': 'numberformat'
    'body': 'NumberFormat(${1:number}${2: [, mask ]})$0'
  'paragraphformat':
    'prefix': 'paragraphformat'
    'body': 'ParagraphFormat(${1:string})$0'
  'parsedatetime':
    'prefix': 'parsedatetime'
    'body': 'ParseDateTime(${1:date/time-string}${2: [, pop-conversion ]})$0'
  'pi':
    'prefix': 'pi'
    'body': 'Pi($1)$0'
  'preservesinglequotes':
    'prefix': 'preservesinglequotes'
    'body': 'PreserveSingleQuotes(${1:variable})$0'
  'quarter':
    'prefix': 'quarter'
    'body': 'Quarter(${1:date})$0'
  'queryExecute':
    'prefix':'queryExecute'
    'body':'queryExecute(${1:query},${2:parameters}${3: [, options]})'
  'queryaddcolumn':
    'prefix': 'queryaddcolumn'
    'body': 'QueryAddColumn(${1:query}, ${2:column-name}${3: [, datatype]}${4: [, array-name]})$0'
  'queryaddrow':
    'prefix': 'queryaddrow'
    'body': 'QueryAddRow(${1:query}${2: [,number]})$0'
  'querynew':
    'prefix': 'querynew'
    'body': 'QueryNew(${1:columnlist}${2: [, columntypelist]})$0'
  'querysetcell':
    'prefix': 'querysetcell'
    'body': 'QuerySetCell(${1:query}, ${2:column_name}, ${3:value}${4: [, row_number ]})$0'
  'quotedvaluelist':
    'prefix': 'quotedvaluelist'
    'body': 'QuotedValueList(${1:query.column}${2: [, delimiter]})$0'
  'rand':
    'prefix': 'rand'
    'body': 'Rand(${1:[algorithm]})$0'
  'randomize':
    'prefix': 'randomize'
    'body': 'Randomize(${1:number}${2: [, algorithm]})$0'
  'randrange':
    'prefix': 'randrange'
    'body': 'RandRange(${1:number1}, ${2:number2}${3: [, algorithm]})$0'
  'refind':
    'prefix': 'refind'
    'body': 'REFind(${1:reg_expression}, ${2:string}${3: [, start]}${4: [, returnsubexpressions]})$0'
  'refindnocase':
    'prefix': 'refindnocase'
    'body': 'REFindNoCase(${1:reg_expression}, ${2:string}${3: [, start]}${4: [, returnsubexpressions]})$0'
  'releasecomobject':
    'prefix': 'releasecomobject'
    'body': 'ReleaseComObject(${1:objectName})$0'
  'removechars':
    'prefix': 'removechars'
    'body': 'RemoveChars(${1:string}, ${2:start}, ${3:count})$0'
  'repeatstring':
    'prefix': 'repeatstring'
    'body': 'RepeatString(${1:string}, ${2:count})$0'
  'replace':
    'prefix': 'replace'
    'body': 'Replace(${1:string}, ${2:substring1}, ${3:substring2}${4: [, scope]})$0'
  'replacelist':
    'prefix': 'replacelist'
    'body': 'ReplaceList(${1:string}, ${2:list1}, ${3:list2})$0'
  'replacenocase':
    'prefix': 'replacenocase'
    'body': 'ReplaceNoCase(${1:string}, ${2:substring1}, ${3:substring2}${4: [, scope]})$0'
  'rereplace':
    'prefix': 'rereplace'
    'body': 'REReplace(${1:string}, ${2:reg_expression}, ${3:substring}${4: [, scope]})$0'
  'rereplacenocase':
    'prefix': 'rereplacenocase'
    'body': 'REReplaceNoCase(${1:string}, ${2:reg_expression}, ${3:substring}${4: [, scope]})$0'
  'reverse':
    'prefix': 'reverse'
    'body': 'Reverse(${1:string})$0'
  'right':
    'prefix': 'right'
    'body': 'Right(${1:string}, ${2:count})$0'
  'rjustify':
    'prefix': 'rjustify'
    'body': 'RJustify(${1:string}, ${2:length})$0'
  'round':
    'prefix': 'round'
    'body': 'Round(${1:number})$0'
  'rtrim':
    'prefix': 'rtrim'
    'body': 'RTrim(${1:string})$0'
  'second':
    'prefix': 'second'
    'body': 'Second(${1:date})$0'
  'sendgatewaymessage':
    'prefix': 'sendgatewaymessage'
    'body': 'SendGatewayMessage(${1:gatewayID}, ${2:data})$0'
  'setencoding':
    'prefix': 'setencoding'
    'body': 'SetEncoding(${1:scope_name,charset})$0'
  'setlocale':
    'prefix': 'setlocale'
    'body': 'SetLocale(${1:new_locale})$0'
  'setprofilestring':
    'prefix': 'setprofilestring'
    'body': 'SetProfileString(${1:iniPath}, ${2:section}, ${3:entry}, ${4:value})$0'
  'setvariable':
    'prefix': 'setvariable'
    'body': 'SetVariable(${1:name}, ${2:value})$0'
  'sgn':
    'prefix': 'sgn'
    'body': 'Sgn(${1:number})$0'
  'sin':
    'prefix': 'sin'
    'body': 'Sin(${1:number})$0'
  'spanexcluding':
    'prefix': 'spanexcluding'
    'body': 'SpanExcluding(${1:string}, ${2:set})$0'
  'spanincluding':
    'prefix': 'spanincluding'
    'body': 'SpanIncluding(${1:string}, ${2:set})$0'
  'sqr':
    'prefix': 'sqr'
    'body': 'Sqr(${1:number})$0'
  'stripcr':
    'prefix': 'stripcr'
    'body': 'StripCR(${1:string})$0'
  'structappend':
    'prefix': 'structappend'
    'body': 'StructAppend(${1:struct1}, ${2:struct2}, ${3:overwriteFlag})$0'
  'structclear':
    'prefix': 'structclear'
    'body': 'StructClear(${1:structure})$0'
  'structcopy':
    'prefix': 'structcopy'
    'body': 'StructCopy(${1:structure})$0'
  'structcount':
    'prefix': 'structcount'
    'body': 'StructCount(${1:structure})$0'
  'structdelete':
    'prefix': 'structdelete'
    'body': 'StructDelete(${1:structure}, ${2:key}${3: [, indicatenotexisting]})$0'
  'structfind':
    'prefix': 'structfind'
    'body': 'StructFind(${1:structure}, ${2:key})$0'
  'structfindkey':
    'prefix': 'structfindkey'
    'body': 'StructFindKey(${1:top}, ${2:value}, ${3:scope})$0'
  'structfindvalue':
    'prefix': 'structfindvalue'
    'body': 'StructFindValue(${1: top}, ${2:value}${3: [, scope]})$0'
  'structget':
    'prefix': 'structget'
    'body': 'StructGet(${1:pathDesired})$0'
  'structinsert':
    'prefix': 'structinsert'
    'body': 'StructInsert(${1:structure}, ${2:key}, ${3:value}${4: [, allowoverwrite]})$0'
  'structisempty':
    'prefix': 'structisempty'
    'body': 'StructIsEmpty(${1:structure})$0'
  'structkeyarray':
    'prefix': 'structkeyarray'
    'body': 'StructKeyArray(${1:structure})$0'
  'structkeyexists':
    'prefix': 'structkeyexists'
    'body': 'StructKeyExists(${1:structure}, ${2:"key"})$0'
  'structkeylist':
    'prefix': 'structkeylist'
    'body': 'StructKeyList(${1:structure}${2: [, delimiter]})$0'
  'structnew':
    'prefix': 'structnew'
    'body': 'StructNew($1)$0'
  'structsort':
    'prefix': 'structsort'
    'body': 'StructSort(${1:base}, ${2:sortType}, ${3:sortOrder}, ${4:pathToSubElement})$0'
  'structupdate':
    'prefix': 'structupdate'
    'body': 'StructUpdate(${1:structure}, ${2:key}, ${3:value})$0'
  'tan':
    'prefix': 'tan'
    'body': 'Tan(${1:number})$0'
  'timeformat':
    'prefix': 'timeformat'
    'body': 'TimeFormat(${1:time}${2: [, mask]})$0'
  'tobase64':
    'prefix': 'tobase64'
    'body': 'ToBase64(${1:string or binary_object}${2: [, encoding]})$0'
  'tobinary':
    'prefix': 'tobinary'
    'body': 'ToBinary(${1:string_in_Base64 or binary_value})$0'
  'toscript':
    'prefix': 'toscript'
    'body': 'ToScript(${1:cfvar}, ${2:javascriptvar}, ${3:outputformat}, ${4:ASFormat})$0'
  'tostring':
    'prefix': 'tostring'
    'body': 'ToString(${1:value}${2: [, encoding]})$0'
  'trim':
    'prefix': 'trim'
    'body': 'Trim(${1:string})$0'
  'try':
    'prefix': 'try'
    'body': 'try {\n\t$0\n} catch(any e) {\n\t\n}'
  'ucase':
    'prefix': 'ucase'
    'body': 'UCase(${1:string})$0'
  'urldecode':
    'prefix': 'urldecode'
    'body': 'URLDecode(${1:urlEncodedString}${2: [, charset]})$0'
  'urlencodedformat':
    'prefix': 'urlencodedformat'
    'body': 'URLEncodedFormat(${1:string}${2: [, charset]})$0'
  'urlsessionformat':
    'prefix': 'urlsessionformat'
    'body': 'URLSessionFormat(${1:request_URL})$0'
  'val':
    'prefix': 'val'
    'body': 'Val(${1:string})$0'
  'valuelist':
    'prefix': 'valuelist'
    'body': 'ValueList(${1:query.column}${2: [, delimiter]})$0'
  'week':
    'prefix': 'week'
    'body': 'Week(${1:date})$0'
  'wrap':
    'prefix': 'wrap'
    'body': 'Wrap(${1:string}, ${2:limit}${3: [, strip]})$0'
  'writeoutput':
    'prefix': 'writeoutput'
    'body': 'WriteOutput(${1:string});$0'
  'writeoutput (Short)':
    'prefix': 'out'
    'body': 'WriteOutput(${1:string});$0'
  'writedump':
    'prefix': 'writedump'
    'body': 'WriteDump(${1:any});$0'
  'xmlchildpos':
    'prefix': 'xmlchildpos'
    'body': 'XmlChildPos(${1:elem}, ${2:childName}, ${3:N})$0'
  'xmlelemnew':
    'prefix': 'xmlelemnew'
    'body': 'XmlElemNew(${1:xmlObj}${2: [, namespace]}${3: [, childName]})$0'
  'xmlformat':
    'prefix': 'xmlformat'
    'body': 'XmlFormat(${1:string})$0'
  'xmlgetnodetype':
    'prefix': 'xmlgetnodetype'
    'body': 'XmlGetNodeType(${1:xmlNode})$0'
  'xmlnew':
    'prefix': 'xmlnew'
    'body': 'XmlNew(${1:[caseSensitive]})$0'
  'xmlparse':
    'prefix': 'xmlparse'
    'body': 'XmlParse(${1:xmlText}${2: [, caseSensitive ]}${3: [, validator]})$0'
  'xmlsearch':
    'prefix': 'xmlsearch'
    'body': 'XmlSearch(${1:xmlDoc}, ${2:xPathString})$0'
  'xmltransform':
    'prefix': 'xmltransform'
    'body': 'XmlTransform(${1:xml}, ${2:xsl}${3: [, parameters]})$0'
  'xmlvalidate':
    'prefix': 'xmlvalidate'
    'body': 'XmlValidate(${1:xmlDoc}${2: [, validator]})$0'
  'year':
    'prefix': 'year'
    'body': 'Year(${1:date})$0'
  'yesnoformat':
    'prefix': 'yesnoformat'
    'body': 'YesNoFormat(${1:value})$0'
